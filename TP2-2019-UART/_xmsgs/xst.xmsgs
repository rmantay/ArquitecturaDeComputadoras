<?xml version="1.0" encoding="UTF-8"?>
<!-- IMPORTANT: This is an internal file that has been generated
     by the Xilinx ISE software.  Any direct editing or
     changes made to this file may result in unpredictable
     behavior or data corruption.  It is strongly advised that
     users do not edit the contents of this file. -->
<messages>
<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">ProgramaTP2.v</arg>&quot; line <arg fmt="%d" index="2">27</arg>: Name conflict (<arg fmt="%s" index="3">&lt;state&gt; and &lt;STATE&gt;, renaming state as state_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">ProgramaTP2.v</arg>&quot; line <arg fmt="%d" index="2">26</arg>: Name conflict (<arg fmt="%s" index="3">&lt;leds&gt; and &lt;LEDS&gt;, renaming leds as leds_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">UART.v</arg>&quot; line <arg fmt="%d" index="2">38</arg>: Name conflict (<arg fmt="%s" index="3">&lt;TICK&gt; and &lt;tick&gt;, renaming TICK as tick_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Rx.v</arg>&quot; line <arg fmt="%d" index="2">31</arg>: Name conflict (<arg fmt="%s" index="3">&lt;state&gt; and &lt;STATE&gt;, renaming state as state_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Tx.v</arg>&quot; line <arg fmt="%d" index="2">32</arg>: Name conflict (<arg fmt="%s" index="3">&lt;state&gt; and &lt;STATE&gt;, renaming state as state_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Rx.v</arg>&quot; line <arg fmt="%d" index="2">32</arg>: Name conflict (<arg fmt="%s" index="3">&lt;ch&gt; and &lt;CH&gt;, renaming ch as ch_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Rx.v</arg>&quot; line <arg fmt="%d" index="2">31</arg>: Name conflict (<arg fmt="%s" index="3">&lt;state&gt; and &lt;STATE&gt;, renaming state as state_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Rx.v</arg>&quot; line <arg fmt="%d" index="2">32</arg>: Name conflict (<arg fmt="%s" index="3">&lt;op&gt; and &lt;OP&gt;, renaming op as op_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Rx.v</arg>&quot; line <arg fmt="%d" index="2">32</arg>: Name conflict (<arg fmt="%s" index="3">&lt;datoA&gt; and &lt;DATOA&gt;, renaming datoA as datoa_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Rx.v</arg>&quot; line <arg fmt="%d" index="2">32</arg>: Name conflict (<arg fmt="%s" index="3">&lt;datoB&gt; and &lt;DATOB&gt;, renaming datoB as datob_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">../../TP1a/ALU.v</arg>&quot; line <arg fmt="%d" index="2">24</arg>: Name conflict (<arg fmt="%s" index="3">&lt;o&gt; and &lt;O&gt;, renaming o as o_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Tx.v</arg>&quot; line <arg fmt="%d" index="2">30</arg>: Name conflict (<arg fmt="%s" index="3">&lt;aux&gt; and &lt;AUX&gt;, renaming aux as aux_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Tx.v</arg>&quot; line <arg fmt="%d" index="2">29</arg>: Name conflict (<arg fmt="%s" index="3">&lt;state&gt; and &lt;STATE&gt;, renaming state as state_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Tx.v</arg>&quot; line <arg fmt="%d" index="2">30</arg>: Name conflict (<arg fmt="%s" index="3">&lt;i&gt; and &lt;I&gt;, renaming i as i_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="863" delta="old" >&quot;<arg fmt="%s" index="1">Int_Tx.v</arg>&quot; line <arg fmt="%d" index="2">30</arg>: Name conflict (<arg fmt="%s" index="3">&lt;j&gt; and &lt;J&gt;, renaming j as j_rnm0</arg>).
</msg>

<msg type="warning" file="Xst" num="2725" delta="old" >&quot;<arg fmt="%s" index="1">Int_Tx.v</arg>&quot; line <arg fmt="%d" index="2">76</arg>: Size mismatch between case item and case selector.
</msg>

<msg type="warning" file="Xst" num="2725" delta="old" >&quot;<arg fmt="%s" index="1">Int_Tx.v</arg>&quot; line <arg fmt="%d" index="2">89</arg>: Size mismatch between case item and case selector.
</msg>

<msg type="warning" file="Xst" num="2725" delta="old" >&quot;<arg fmt="%s" index="1">Int_Tx.v</arg>&quot; line <arg fmt="%d" index="2">112</arg>: Size mismatch between case item and case selector.
</msg>

<msg type="warning" file="Xst" num="643" delta="old" >&quot;<arg fmt="%s" index="1">Int_Rx.v</arg>&quot; line <arg fmt="%d" index="2">227</arg>: The result of a <arg fmt="%d" index="3">8</arg>x<arg fmt="%d" index="4">4</arg>-bit multiplication is partially used. Only the <arg fmt="%d" index="5">8</arg> least significant bits are used. If you are doing this on purpose, you may safely ignore this warning. Otherwise, make sure you are not losing information, leading to unexpected circuit behavior.
</msg>

<msg type="warning" file="Xst" num="643" delta="old" >&quot;<arg fmt="%s" index="1">Int_Rx.v</arg>&quot; line <arg fmt="%d" index="2">177</arg>: The result of a <arg fmt="%d" index="3">8</arg>x<arg fmt="%d" index="4">4</arg>-bit multiplication is partially used. Only the <arg fmt="%d" index="5">8</arg> least significant bits are used. If you are doing this on purpose, you may safely ignore this warning. Otherwise, make sure you are not losing information, leading to unexpected circuit behavior.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">8</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">ch_rnm0</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="info" file="Xst" num="2371" delta="old" >HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.
</msg>

<msg type="warning" file="Xst" num="647" delta="old" >Input &lt;<arg fmt="%s" index="1">fifo_full</arg>&gt; is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">8</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">data_fifo</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">8</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">j_rnm0</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="info" file="Xst" num="2371" delta="old" >HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">8</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">i_rnm0</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="info" file="Xst" num="2371" delta="old" >HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">flag</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="info" file="Xst" num="2371" delta="old" >HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.
</msg>

<msg type="warning" file="Xst" num="646" delta="old" >Signal &lt;<arg fmt="%s" index="1">w_ptr_succ</arg>&gt; is assigned but never used. This unconnected signal will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="646" delta="old" >Signal &lt;<arg fmt="%s" index="1">r_ptr_succ</arg>&gt; is assigned but never used. This unconnected signal will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1780" delta="old" >Signal &lt;<arg fmt="%s" index="1">tick</arg>&gt; is never used or assigned. This unconnected signal will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="646" delta="old" >Signal &lt;<arg fmt="%s" index="1">state_rx</arg>&gt; is assigned but never used. This unconnected signal will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1780" delta="old" >Signal &lt;<arg fmt="%s" index="1">leds_rnm0</arg>&gt; is never used or assigned. This unconnected signal will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1780" delta="old" >Signal &lt;<arg fmt="%s" index="1">leds_next</arg>&gt; is never used or assigned. This unconnected signal will be trimmed during the optimization process.
</msg>

<msg type="info" file="Xst" num="1767" delta="old" >HDL ADVISOR - Resource sharing has identified that some arithmetic operations in this design can share the same physical resources for reduced device utilization. For improved clock frequency you may try to disable resource sharing.
</msg>

<msg type="info" file="Xst" num="3217" delta="old" >HDL ADVISOR - Register &lt;<arg fmt="%s" index="1">b</arg>&gt; currently described with an asynchronous reset, could be combined with distributed RAM &lt;<arg fmt="%s" index="2">Mram_cola_circular</arg>&gt; for implementation on block RAM resources if you made this reset synchronous instead.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">op_rnm0_7</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">Int_Rx</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">op_rnm0_6</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">Int_Rx</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">op_rnm0_4</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">Int_Rx</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">op_rnm0_3</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">Int_Rx</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="2170" delta="old" >Unit <arg fmt="%s" index="1">ALU</arg> : the following signal(s) form a combinatorial loop: </msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_7</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_6</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_5</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_4</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_3</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_2</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_1</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="2677" delta="old" >Node &lt;<arg fmt="%s" index="1">intRx/ch_rnm0_0</arg>&gt; of sequential type is unconnected in block &lt;<arg fmt="%s" index="2">ProgramaTP2</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="2169" delta="old" >HDL ADVISOR - Some clock signals were not automatically buffered by XST with BUFG/BUFR resources. Please use the buffer_type constraint in order to insert these buffers to the clock signals to help prevent skew problems.
</msg>

</messages>

